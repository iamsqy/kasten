#+title: Kasten Manual
#+subtitle: for version {{{version}}}, {{{updated}}}
#+author: Qiyang Sun

#+OPTIONS: ':t toc:t author:t
#+LANGUAGE: en

#+MACRO: version 0.2
#+MACRO: updated last updated 2025-07-08
#+macro: kbd (eval (org-texinfo-kbd-macro $1))

#+TEXINFO_FILENAME: kasten.info

#+TEXINFO_DIR_CATEGORY: Emacs
#+TEXINFO_DIR_NAME: Kasten Mode
#+TEXINFO_DIR_DESC: Zettelkasten note browser

#+texinfo: @insertcopying

* Copying
:PROPERTIES:
:COPYING:  t
:END:

This manual is for Kasten (version {{{version}}}, {{{updated}}}), which is
an Emacs package for managing Zettelkasten-style notes.

Copyright \copy 2025 Qiyang Sun

#+BEGIN_QUOTE
  Permission is granted to copy, distribute and/or modify this
  document under the terms of the GNU Free Documentation License,
  Version 1.3 or any later version published by the Free Software
  Foundation; with no Invariant Sections, with no Front-Cover Texts,
  and with no Back-Cover Texts.  A copy of the license is included in
  the section entitled "GNU Free Documentation License".
#+END_QUOTE

* Synopsis

=Kasten= is an [[https://www.gnu.org/software/emacs/][Emacs]] package designed to provide a focused and efficient
browsing experience for [[https://zettelkasten.de/][Zettelkasten]]-style notes.

Kasten is inspired by [[https://melpa.org/#/deft][Deft]] and [[https://melpa.org/#/zetteldeft][Zetteldeft]].

* Copying

- Kasten is not part of GNU Emacs.
- Kasten is free software.
- Kasten Manual is free documentation.

** Copying Kasten (Software)

Kasten is licensed under the GNU General Public License Version 3.

See the file =COPYING= or the appendix [[*GNU General Public License]] for details.

*Copyright (C) 2025 Qiyang Sun*

This program is free software: you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program. If not, see <https://www.gnu.org/licenses/>.

** Copying Kasten Manual (Documentation)

Kasten Manual is licensed under the GNU Free Documentation License Version 1.3.

See the file =docs/COPYING= or the appendix [[*GNU Free Documentation License]] for
details.

*Copyright (C) 2025 Qiyang Sun*

Permission is granted to copy, distribute and/or modify this document under the
terms of the GNU Free Documentation License, Version 1.3 or any later version
published by the Free Software Foundation; with no Invariant Sections, with no
Front-Cover Texts, and with no Back-Cover Texts.  A copy of the license is
included in the section entitled "GNU Free Documentation License".

* Concepts

``Zettelkasten'' is a note-taking and personal knowledge management system
intensively used by Niklas Luhmann et al.  In Zettelkasten, notes should be
atomic, connected through meaningful links.

The introduction to Zettelkasten method can be found online, such as
[[https://zettelkasten.de/]] and [[https://en.wikipedia.org/wiki/Zettelkasten]].
Readers may wish to refer to the literature as the Kasten Manual does not
provide a detailed introduction to the Zettelkasten methodology itself.

Kasten is inspired by Zetteldeft, a Zettelkasten system on top of Deft.  Deft is
a note browsing system inspired by Notational Velocity.

Kasten designed based on the following ideas in mind.
- The system should be highly customisable.
- The system should be fast.
- Each note has a unique ID as its filename, typically derived from the creation
  time.
- Notes can be linked to each other by inserting IDs.
- Notes can be tagged.  A note may have zero, one or many tags.
- Notes can be categorised.  A note may have zero or one category.  This is
  against the Zettelkasten principles, but Kasten users should have the right to
  category their notes should they wish to, for example, if they have their own
  philosophies of knowledge management.
  
* Features

This package has the following main features:
- Browse notes with titles, categories and IDs displayed.
  - Titles are indexed by looking for a =#+title:= pattern (customisable).
  - Categories are indexed by looking for a =#+category:= pattern
    (customisable).
  - The index can be configured to update automatically.
- Deft-like live search available.
- Title and category filters for advanced search.
- Note searching significantly faster than deft.
  - Heavy content search =consult-ripgrep= (needs package [[https://melpa.org/#/consult][consult]],
    customisable).
  - Limited use of =string-match= ({{{kbd(C-h f string-match RET)}}}).
- ID format fully customisable (with the ability to include sanitised title).
- Followable note IDs for easy navigation.
- ID changable with auto-update references.
- Insert tags and note IDs with auto-completion support.
- Backlink searching to find references between notes.
- Functions to get note path and attachment directory path for integration with
  other packages.
- Customisable user interface.

* Installation

** COMMENT MELPA (not yet published) and ~use-package~

(*unpublished*) If MELPA is in the package archives, simply:

{{{kbd(M-x package-install RET kasten RET)}}}

If using =use-package=, add the following to the Emacs configuration file (such
as =init.el=):

#+begin_src elisp
  (use-package kasten
    :ensure t
    :defer t
    :commands (kasten))
#+end_src

** Tarball

1. Download the latest release tarball and signature (=*.sig=) from the [[https://github.com/iamsqy/kasten/releases][GitHub
   Releases page]].
2. Verify PGP signature.
   #+begin_src bash
     # 2.1 Receive the maintainer's PGP key
     gpg --keyserver keyserver.ubuntu.com --recv-keys F8AD5243C3CFB24E
     # 2.2 Verify
     gpg --verify /path/to/kasten.tar.gz
     # if the output is not "gpg: Good signature from...", then STOP!
   #+end_src
3. GitHub does not allow uploading =.tar= files in Release. If the
   file has extension =.tar.gz=, extract it.
   #+begin_src bash
     gzip -d /path/to/kasten.tar.gz
   #+end_src
4. In Emacs, run
   ~M-x~ ~package-install-file~ ~<RET>~ ~/path/to/kasten.tar~ ~<RET>~

** Manual Installation

Clone or download =kasten.el= and place it in the =load-path=. Then add the
following to the Emacs configuration file (such as =init.el=):

#+begin_src elisp
  (require 'kasten)
#+end_src

* Usage

** Kasten Major Mode and Kasten Minor Mode

Kasten major mode (=kasten-mode=) is for note browsing, filtering and editing,
similar to Deft.  Kasten minor mode (=kasten-minor-mode=) is for invoking Kasten
methods whilst visiting a note.  For Kasten major mode map and usage, see
[[*Kasten Major Mode]].

- Command: kasten ::
  Launch Kasten major mode with {{{kbd(M-x kasten RET)}}}.


Kasten minor mode is enabled by default if the note buffer is created by Kasten.
Kasten minor mode has a lighter =Kt= (customisable).  For Kasten minor mode map
and usage, see [[*Kasten Minor Mode]].

- Command: kasten-minor-mode ::
  Toggle ~kasten-minor-mode~ for current buffer.


Refer to the Emacs Lisp code for detailed function and variable documentations.

** Kasten Major Mode

- Key: RET (kasten-open-file) ::
  #+BEGIN_SRC elisp :results raw :exports results
    (documentation #'kasten-open-file)
  #+END_SRC

- Key: / (kasten-live-search) ::
  #+BEGIN_SRC elisp :results raw :exports results
    (documentation #'kasten-live-search)
  #+END_SRC

- Key: ? (kasten-filters-edit) ::
  #+BEGIN_SRC elisp :results raw :exports results
    (documentation #'kasten-filters-edit)
  #+END_SRC

- Key: g (kasten-refresh) ::
  #+BEGIN_SRC elisp :results raw :exports results
    (car (split-string (documentation #'kasten-refresh)))
  #+END_SRC

- Key: s (kasten-search) ::
  #+BEGIN_SRC elisp :results raw :exports results
    (documentation #'kasten-search)
  #+END_SRC

- Key: t (kasten-search-tag) ::
  #+BEGIN_SRC elisp :results raw :exports results
    (documentation #'kasten-search-tag)
  #+END_SRC

- Key: n (kasten-create-new-note) ::
  #+BEGIN_SRC elisp :results raw :exports results
    (documentation #'kasten-create-new-note)
  #+END_SRC

*** Live Search

*** Filters

** Kasten Minor Mode

- Key: C-c C-k k (kasten) ::
  Back to Kasten major mode.

- Key: C-c C-k b (kasten-show-backlinks-current-note) ::
  #+BEGIN_SRC elisp :results raw :exports results
    (documentation #'kasten-show-backlinks-current-note)
  #+END_SRC

- Key: C-c C-k i (kasten-insert-id) ::
  #+BEGIN_SRC elisp :results raw :exports results
    (documentation #'kasten-insert-id)
  #+END_SRC

- Key: C-c C-k I (kasten-change-id) ::
  #+BEGIN_SRC elisp :results raw :exports results
    (documentation #'kasten-change-id)
  #+END_SRC

- Key: C-c C-k n (kasten-create-new-note-at-point) ::
  #+BEGIN_SRC elisp :results raw :exports results
    (documentation #'kasten-create-new-note-at-point)
  #+END_SRC

- Key: C-c C-k t (kasten-insert-tag) ::
  #+BEGIN_SRC elisp :results raw :exports results
    (documentation #'kasten-insert-tag)
  #+END_SRC

- Key: C-c C-k T (kasten-search-tag) ::
  #+BEGIN_SRC elisp :results raw :exports results
    (documentation #'kasten-search-tag)
  #+END_SRC

* Customisation

*TODO: outdated*

Kasten is customisable using =customize=, via {{{kbd(M-x customize-group RET
kasten RET)}}} or GUI.

Alternatively, one can customise Kasten in the Emacs configuration file (such as
=init.el=, or under =use-package=). Below are /default/ configurations.

#+begin_src elisp
  ;; Directory containing your notes
  ;; Kasten recursively finds all notes under kasten-directory
  (setq kasten-directory (expand-file-name "~/jrn/"))

  ;; File extensions to include in search
  ;; E.g., Org mode files, text files, and (La)TeX files
  (setq kasten-file-extensions '("org" "txt" "tex"))

  ;; Function used for searching within the Kasten directory
  ;; If consult-ripgrep is not ideal, one may change here
  (setq kasten-search-function #'consult-ripgrep)

  ;; Regexp to match the title of a note
  ;; Matches `\#+title:' , `\#+TITLE:' , `\#+Title:', ...
  (setq kasten-title-regexp "^#\\+[tT][iI][tT][lL][eE]: *\\(.*\\)$")

  ;; Max position of the title of a note
  ;; Reduce if slow
  (setq kasten-title-max-pos 4096)

  ;; Regexp to match a tag of a note
  ;; Matches `\#foobar'
  (setq kasten-tag-regexp "#\\([[:alnum:]_-]+\\)")

  ;; Max position of the title of a note
  ;; Reduce if slow
  (setq kasten-tag-max-pos 65536)

  ;; Regexp for the tag char (for consult-ripgrep to understand)
  ;; `\\x23' is `\#' in PCRE
  (setq kasten-tag-first-char-regexp "\\x23")

  ;; Leading symbol for ID
  ;; May be longer than 1 char
  (setq kasten-id-symbol "§")

  ;; Regexp to match the ID
  ;; Matches `\§20250229-2333'
  (setq kasten-id-regexp "§\\([0-9]\\{8\\}-[0-9]\\{4\\}\\)")

  ;; Buffer title
  ;; If you don't like `Kasten' as the name
  (setq kasten-buffer-title "Kasten\n")

  ;; Auto refresh
  ;; If non-nil, automatically refresh Kasten buffer when files change
  (setq kasten-auto-refresh t)
#+end_src

* Benchmark

1000 files (~5.9G) are generated using the following script to benchmark Kasten.

#+begin_src bash
  #!/bin/bash
  for i in {1..1000}; do
      dd if=/dev/urandom bs=1k count=4096 of="random_${i}.bin" status=none
      base64 -i "random_${i}.bin" -o "random_${i}.txt"
      rm "random_${i}.bin"
  done
#+end_src

The following benchmark is obtained by {{{kbd(M-x benchmark)}}}. Variables
=gc-cons-threshold= and =gc-cons-percentage= are set to ~16000000~ and ~0.1~,
accordingly.

| Package | Form       | Elapsed Time | Garbage Collections |
|---------+------------+--------------+---------------------|
| Deft    | =(deft)=   | 148.025919s  |                  86 |
| Kasten  | =(kasten)= | 0.682055s    |                   1 |

* Contributing

Contributions and bug reports are welcome! Please open issues or pull requests
on the GitHub repository.

Users are encouraged to report any significant slowness of Kasten! If possible,
please include the following information, but please *do not include any
sensitive information*:
+ Emacs version ({{{kbd(M-x emacs-version RET)}}})
+ Kasten version
+ Operating system (=uname -a=)
+ Number of indexed files (=ls -1 /path/to/notes | wc -l=)
+ Total size of indexed files (=du -sh /path/to/notes=)
+ Profiler report ({{{kbd(M-x profiler-start RET RET)}}}, perform action,
  {{{kbd(M-x profiler-stop RET)}}}, and then {{{kbd(M-x profiler-report RET)}}}
+ Benchmark of the slow function ({{{kbd(M-x benchmark RET)}}} followed by the
  function and {{{kbd(RET)}}})

* GNU Free Documentation License
:PROPERTIES:
:APPENDIX: t
:END:

#+BEGIN_SRC shell :wrap example :results output :exports results
 cat ./COPYING
#+END_SRC

* GNU General Public License
:PROPERTIES:
:APPENDIX: t
:END:

#+BEGIN_SRC shell :wrap example :results output :exports results
 cat ../COPYING
#+END_SRC


# Local Variables:
# org-confirm-babel-evaluate: nil
# eval: (add-hook 'before-save-hook (lambda () (when (string= (buffer-file-name) "/Users/iamsqy/Desktop/kasten/docs/kasten.org") (save-excursion (goto-char (point-min)) (when (re-search-forward "^#\\+MACRO: updated .*" nil t) (replace-match (concat "#+MACRO: updated last updated " (format-time-string "%Y-%m-%d")))))) nil t))
# End:
