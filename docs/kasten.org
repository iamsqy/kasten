#+title: Kasten Manual
#+subtitle: for version {{{version}}}, {{{updated}}}
#+author: Qiyang Sun

#+OPTIONS: ':t toc:t author:t
#+LANGUAGE: en

#+MACRO: version 0.90.0
#+MACRO: updated last updated 2025-07-09
#+macro: kbd (eval (org-texinfo-kbd-macro $1))

#+TEXINFO_FILENAME: kasten.info

#+TEXINFO_DIR_CATEGORY: Emacs
#+TEXINFO_DIR_NAME: Kasten Mode
#+TEXINFO_DIR_DESC: Zettelkasten note browser

#+texinfo: @insertcopying

* Copying
:PROPERTIES:
:COPYING:  t
:END:

This manual is for Kasten (version {{{version}}}, {{{updated}}}), which is
an Emacs package for managing Zettelkasten-style notes.

Copyright \copy 2025 Qiyang Sun

#+BEGIN_QUOTE
  Permission is granted to copy, distribute and/or modify this
  document under the terms of the GNU Free Documentation License,
  Version 1.3 or any later version published by the Free Software
  Foundation; with no Invariant Sections, with no Front-Cover Texts,
  and with no Back-Cover Texts.  A copy of the license is included in
  the section entitled "GNU Free Documentation License".
#+END_QUOTE

* Synopsis

=Kasten= is an [[https://www.gnu.org/software/emacs/][Emacs]] package designed to provide a focused and efficient
browsing experience for [[https://zettelkasten.de/][Zettelkasten]]-style notes.

Kasten is inspired by [[https://melpa.org/#/deft][Deft]] and [[https://melpa.org/#/zetteldeft][Zetteldeft]].

* Copying

- Kasten is not part of GNU Emacs.
- Kasten is free software.
- Kasten Manual is free documentation.

** Copying Kasten (Software)

Kasten is licensed under the GNU General Public License Version 3.

See the file =COPYING= or the appendix [[*GNU General Public License]] for details.

*Copyright (C) 2025 Qiyang Sun*

This program is free software: you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program. If not, see <https://www.gnu.org/licenses/>.

** Copying Kasten Manual (Documentation)

Kasten Manual is licensed under the GNU Free Documentation License Version 1.3.

See the file =docs/COPYING= or the appendix [[*GNU Free Documentation License]] for
details.

*Copyright (C) 2025 Qiyang Sun*

Permission is granted to copy, distribute and/or modify this document under the
terms of the GNU Free Documentation License, Version 1.3 or any later version
published by the Free Software Foundation; with no Invariant Sections, with no
Front-Cover Texts, and with no Back-Cover Texts.  A copy of the license is
included in the section entitled "GNU Free Documentation License".

* Concepts

``Zettelkasten'' is a note-taking and personal knowledge management system
intensively used by Niklas Luhmann et al.  In Zettelkasten, notes should be
atomic, connected through meaningful links.

The introduction to Zettelkasten method can be found online, such as
[[https://zettelkasten.de/]] and [[https://en.wikipedia.org/wiki/Zettelkasten]].
Readers may wish to refer to the literature as the Kasten Manual does not
provide a detailed introduction to the Zettelkasten methodology itself.

Kasten is inspired by Zetteldeft, a Zettelkasten system on top of Deft.  Deft is
a note browsing system inspired by Notational Velocity.

Kasten is designed base on the following ideas in mind.
- The system should be highly customisable.
- The system should be fast.
- Each note has a unique ID as its filename, typically derived from the creation
  time.
- Notes can be linked to each other by inserting IDs.
- Notes can be tagged.  A note may have zero, one or many tags.
- Notes can be categorised.  A note may have zero or one category.  This is
  against the Zettelkasten principles, but Kasten users should have the right to
  category their notes should they wish to, for example, if they have their own
  philosophies of knowledge management.
  
* Features

This package has the following main features:
- Browse notes with titles, categories and IDs displayed.
  - Titles are indexed by looking for a =#+title:= pattern (customisable).
  - Categories are indexed by looking for a =#+category:= pattern
    (customisable).
  - The index can be configured to update automatically.
- Deft-like live search available.
- Title and category filters for advanced search.
- Note searching significantly faster than deft.
  - Heavy content search =consult-ripgrep= (needs package [[https://melpa.org/#/consult][consult]],
    customisable).
  - Limited use of =string-match= ({{{kbd(C-h f string-match RET)}}}).
- ID format fully customisable (with the ability to include sanitised title).
- Followable note IDs for easy navigation.
- ID is changable with auto-update references.
- Insert tags and note IDs with auto-completion support.
- Backlink searching to find references between notes.
- Functions to get note path and attachment directory path for integration with
  other packages.
- Customisable user interface.

* Installation

** COMMENT MELPA (not yet published) and ~use-package~

(*unpublished*) If MELPA is in the package archives, simply:

{{{kbd(M-x package-install RET kasten RET)}}}

If using =use-package=, add the following to the Emacs configuration file (such
as =init.el=):

#+begin_src elisp
  (use-package kasten
    :ensure t
    :defer t
    :commands (kasten))
#+end_src

** Tarball

1. Download the latest release tarball and signature (=*.sig=) from the [[https://github.com/iamsqy/kasten/releases][GitHub
   Releases page]].
2. Verify PGP signature.
   #+begin_src bash
     # 2.1 Receive the maintainer's PGP key
     gpg --keyserver keyserver.ubuntu.com --recv-keys F8AD5243C3CFB24E
     # 2.2 Verify
     gpg --verify /path/to/kasten.tar.gz
     # if the output is not "gpg: Good signature from...", then STOP!
   #+end_src
3. GitHub does not allow uploading =.tar= files in Release. If the
   file has extension =.tar.gz=, extract it.
   #+begin_src bash
     gzip -d /path/to/kasten.tar.gz
   #+end_src
4. In Emacs, run
   ~M-x~ ~package-install-file~ ~<RET>~ ~/path/to/kasten.tar~ ~<RET>~

** Manual Installation

Clone or download =kasten.el= and place it in the =load-path=. Then add the
following to the Emacs configuration file (such as =init.el=):

#+begin_src elisp
  (require 'kasten)
#+end_src

* Usage

** Kasten Major Mode and Kasten Minor Mode

Kasten major mode (=kasten-mode=) is for note browsing, filtering and editing,
similar to Deft.  For Kasten major mode map and usage, see [[*Kasten Major Mode]].
Kasten minor mode (=kasten-minor-mode=) is for invoking Kasten methods whilst
visiting a note.  For Kasten minor mode map and usage, see [[*Kasten Minor Mode]].

- Command: kasten ::
  Launch Kasten major mode with {{{kbd(M-x kasten RET)}}}.


Kasten minor mode is enabled by default if the note buffer is created by Kasten.
Kasten minor mode has a lighter =Kt= (customisable).

- Command: kasten-minor-mode ::
  Toggle ~kasten-minor-mode~ for current buffer.


Refer to the Emacs Lisp code for detailed function and variable documentation.

** Kasten Major Mode

- Key: RET (kasten-open-file) ::
  #+BEGIN_SRC elisp :results raw :exports results
    (documentation #'kasten-open-file)
  #+END_SRC

- Key: / (kasten-live-search) ::
  #+BEGIN_SRC elisp :results raw :exports results
    (documentation #'kasten-live-search)
  #+END_SRC

- Key: ? (kasten-filters-edit) ::
  #+BEGIN_SRC elisp :results raw :exports results
    (documentation #'kasten-filters-edit)
  #+END_SRC

- Key: g (kasten-refresh) ::
  #+BEGIN_SRC elisp :results raw :exports results
    (car (split-string (documentation #'kasten-refresh)))
  #+END_SRC

- Key: s (kasten-search) ::
  #+BEGIN_SRC elisp :results raw :exports results
    (documentation #'kasten-search)
  #+END_SRC

- Key: t (kasten-search-tag) ::
  #+BEGIN_SRC elisp :results raw :exports results
    (documentation #'kasten-search-tag)
  #+END_SRC

- Key: n (kasten-create-new-note) ::
  #+BEGIN_SRC elisp :results raw :exports results
    (documentation #'kasten-create-new-note)
  #+END_SRC

*** Live Search

In a Live Search, one can type anywhere to search titles, categories and IDs.
It is unnecessary to place the point into the text box---a temporary key map is
used to handle input, supporting letters, symbols and non-ASCII characters.
Case is insensitive.

#+ATTR_TEXINFO: :table-type vtable :indic asis :compact t
- Key: C-g (kasten--quit-live-search) ::
- Key: ESC ESC ESC (kasten--quit-live-search) ::
  #+BEGIN_SRC elisp :results raw :exports results
    (documentation #'kasten--quit-live-search)
  #+END_SRC

- Key: DEL ::
  Delete the last input character.

- Key: RET (kasten-open-file) ::
  #+BEGIN_SRC elisp :results raw :exports results
    (documentation #'kasten-open-file)
  #+END_SRC


A letter =s= will appear next to Kasten buffer title indicating Live Search is
activated.

*** Filters

With Filters, one can filter titles and/or categories.

By invoking =kasten-filters-edit=, a new buffer =*Kasten Filters*= is
created.  This buffer is in ~kasten-filters-mode~, for users to edit filters.

Lines starting with a =%= symbol are read-only comments.  Lines starting with a
=#= are read-only headers which will be parsed.

- Title filters ::
  Enter titles one per line.  Case is insensitive.  A note will be displayed if
  it has at least one title filter as its substring.  Use of Emacs regular
  expressions is allowed.  Leave this field empty to keep all notes.

- Category filters ::
  Enter categories one per line.  Case is sensitive.  A note will be displayed
  if it has a category and the category is exactly one of the category filters.
  Leave this field empty to keep all notes.

- Mode ::
  Logic operator for the filter operation.  May be either `and' or `or'.  If
  only one of the title filters and category filters is needed, use `and'.


Kasten-Filters mode has the following key bindings.

- Key: C-c C-c (kasten-filters-save-and-kill) ::
  Try to parse the buffer contents and apply them to Kasten filters, then kill
  this buffer and delete the selected window.
  
- Key: C-c C-k (kill-buffer-and-window) ::
  Kill the Kasten-Filters buffer and delete the selected window; discard any
  changes to the filters.
  
- Key: C-c C-t (kasten-filters--toggle-the-mode) ::
  Toggle the mode on the current line between `or' and `and'.  Only valid if the
  point is placed on the mode text (placed on the text `or' or `and').


A letter =f= will appear next to Kasten buffer title indicating Kasten Filters
are activated.

** Kasten Minor Mode

- Key: C-c C-k k (kasten) ::
  Back to Kasten major mode.

- Key: C-c C-k b (kasten-show-backlinks-current-note) ::
  #+BEGIN_SRC elisp :results raw :exports results
    (documentation #'kasten-show-backlinks-current-note)
  #+END_SRC

- Key: C-c C-k i (kasten-insert-id) ::
  #+BEGIN_SRC elisp :results raw :exports results
    (documentation #'kasten-insert-id)
  #+END_SRC

- Key: C-c C-k I (kasten-change-id) ::
  #+BEGIN_SRC elisp :results raw :exports results
    (documentation #'kasten-change-id)
  #+END_SRC

- Key: C-c C-k n (kasten-create-new-note-at-point) ::
  #+BEGIN_SRC elisp :results raw :exports results
    (documentation #'kasten-create-new-note-at-point)
  #+END_SRC

- Key: C-c C-k t (kasten-insert-tag) ::
  #+BEGIN_SRC elisp :results raw :exports results
    (documentation #'kasten-insert-tag)
  #+END_SRC

- Key: C-c C-k T (kasten-search-tag) ::
  #+BEGIN_SRC elisp :results raw :exports results
    (documentation #'kasten-search-tag)
  #+END_SRC

* Customisation

** Customisable Variables

Kasten is customisable using =customize=, via {{{kbd(M-x customize-group RET
kasten RET)}}}. Alternatively, one may use ~setq~.  For
example, to change the variable =kasten-directory= to =~/notes= using ~setq~,
one may add the following code to their Emacs configuration file (such as
=init.el=, preferably under =use-package=).

#+begin_src elisp
  (setq kasten-directory (expand-file-name "~/notes/"))
#+end_src

Default values in the manual may be evaluated, simplified or slightly modified.
Please refer to the source code and search for =defcustom=.


- Variable: kasten-directory ::

  #+BEGIN_SRC elisp :results raw :exports results
    (documentation-property 'kasten-directory 'variable-documentation)
  #+END_SRC

  #+BEGIN_SRC elisp :results raw :exports results
    (concat "Default value: =" "~/jrn/" "=.")
  #+END_SRC
     
- Variable: kasten-file-extensions ::

  #+BEGIN_SRC elisp :results raw :exports results
    (documentation-property 'kasten-file-extensions 'variable-documentation)
  #+END_SRC

  #+BEGIN_SRC elisp :results raw :exports results
    (concat "Default value: ="
    	(prin1-to-string (default-value 'kasten-file-extensions))
    	 "=.")
  #+END_SRC

- Variable: kasten-default-extension ::

  #+BEGIN_SRC elisp :results raw :exports results
    (documentation-property 'kasten-default-extension 'variable-documentation)
  #+END_SRC

  #+BEGIN_SRC elisp :results raw :exports results
    (concat "Default value: =" (default-value 'kasten-default-extension) "=.")
  #+END_SRC

- Variable: kasten-note-title-template ::

  #+BEGIN_SRC elisp :results raw :exports results
    (documentation-property 'kasten-note-title-template 'variable-documentation)
  #+END_SRC

  #+BEGIN_SRC elisp :results raw :exports results
    (concat "Default value: =#+title:=.")
  #+END_SRC

- Variable: kasten-index-hidden-files ::

  #+BEGIN_SRC elisp :results raw :exports results
    (documentation-property 'kasten-index-hidden-files 'variable-documentation)
  #+END_SRC

  #+BEGIN_SRC elisp :results raw :exports results
    (concat "Default value: ="
    	(prin1-to-string (default-value 'kasten-index-hidden-files))
    	"=.")
  #+END_SRC

- Variable: kasten-search-function ::

  #+BEGIN_SRC elisp :results raw :exports results
    (documentation-property 'kasten-search-function 'variable-documentation)
  #+END_SRC

  #+BEGIN_SRC elisp :results raw :exports results
    (concat "Default value: ="
    	(prin1-to-string (default-value 'kasten-search-function))
    	"=.")
  #+END_SRC

- Variable: kasten-title-regexp ::

  #+BEGIN_SRC elisp :results raw :exports results
    (documentation-property 'kasten-title-regexp 'variable-documentation)
  #+END_SRC

  #+BEGIN_SRC elisp :results raw :exports results
    (concat "Default value: ="
    	(prin1-to-string (default-value 'kasten-title-regexp))
    	"=.")
  #+END_SRC

- Variable: kasten-title-max-pos ::

  #+BEGIN_SRC elisp :results raw :exports results
    (documentation-property 'kasten-title-max-pos 'variable-documentation)
  #+END_SRC

  #+BEGIN_SRC elisp :results raw :exports results
    (concat "Default value: ="
    	(prin1-to-string (default-value 'kasten-title-max-pos))
    	"=.")
  #+END_SRC

- Variable: kasten-category-regexp ::

  #+BEGIN_SRC elisp :results raw :exports results
    (documentation-property 'kasten-category-regexp 'variable-documentation)
  #+END_SRC

  #+BEGIN_SRC elisp :results raw :exports results
    (concat "Default value: ="
    	(prin1-to-string (default-value 'kasten-category-regexp))
    	"=.")
  #+END_SRC

- Variable: kasten-empty-category-placeholder ::

  #+BEGIN_SRC elisp :results raw :exports results
    (documentation-property
     'kasten-empty-category-placeholder
     'variable-documentation)
  #+END_SRC

  #+BEGIN_SRC elisp :results raw :exports results
    (concat "Default value: ="
    	(prin1-to-string (default-value 'kasten-empty-category-placeholder))
    	"=.")
  #+END_SRC

- Variable: kasten-category-max-pos ::

  #+BEGIN_SRC elisp :results raw :exports results
    (documentation-property 'kasten-category-max-pos 'variable-documentation)
  #+END_SRC

  #+BEGIN_SRC elisp :results raw :exports results
    (concat "Default value: ="
    	(prin1-to-string (default-value 'kasten-category-max-pos))
    	"=.")
  #+END_SRC

- Variable: kasten-title-category-split ::

  #+BEGIN_SRC elisp :results raw :exports results
    (documentation-property 'kasten-title-category-split 'variable-documentation)
  #+END_SRC

  #+BEGIN_SRC elisp :results raw :exports results
    (concat "Default value: ="
    	(prin1-to-string (default-value 'kasten-title-category-split))
    	"=.")
  #+END_SRC

- Variable: kasten-tag-regexp ::

  #+BEGIN_SRC elisp :results raw :exports results
    (documentation-property 'kasten-tag-regexp 'variable-documentation)
  #+END_SRC

  #+BEGIN_SRC elisp :results raw :exports results
    (concat "Default value: ="
    	(prin1-to-string (default-value 'kasten-tag-regexp))
    	"=.")
  #+END_SRC

- Variable: kasten-tag-max-pos ::

  #+BEGIN_SRC elisp :results raw :exports results
    (documentation-property 'kasten-tag-max-pos 'variable-documentation)
  #+END_SRC

  #+BEGIN_SRC elisp :results raw :exports results
    (concat "Default value: ="
    	(prin1-to-string (default-value 'kasten-tag-max-pos))
    	"=.")
  #+END_SRC

- Variable: kasten-tag-symbol ::

  #+BEGIN_SRC elisp :results raw :exports results
    (documentation-property 'kasten-tag-symbol 'variable-documentation)
  #+END_SRC

  #+BEGIN_SRC elisp :results raw :exports results
    (concat "Default value: ="
    	(prin1-to-string (default-value 'kasten-tag-symbol))
    	"=.")
  #+END_SRC

- Variable: kasten-tag-first-char-regexp ::

  #+BEGIN_SRC elisp :results raw :exports results
    (documentation-property
      'kasten-tag-first-char-regexp
      'variable-documentation)
  #+END_SRC

  #+BEGIN_SRC elisp :results raw :exports results
    (concat "Default value: ="
    	(prin1-to-string (default-value 'kasten-tag-first-char-regexp))
    	"=.")
  #+END_SRC

- Variable: kasten-id-symbol ::

  #+BEGIN_SRC elisp :results raw :exports results
    (documentation-property 'kasten-id-symbol 'variable-documentation)
  #+END_SRC

  #+BEGIN_SRC elisp :results raw :exports results
    (concat "Default value: ="
    	(prin1-to-string (default-value 'kasten-id-symbol))
    	"=.")
  #+END_SRC

- Variable: kasten-id-format ::

  #+BEGIN_SRC elisp :results raw :exports results
    (documentation-property 'kasten-id-format 'variable-documentation)
  #+END_SRC

  #+BEGIN_SRC elisp :results raw :exports results
    (concat "Default value: ="
    	(prin1-to-string (default-value 'kasten-id-format))
    	"=.")
  #+END_SRC

- Variable: kasten-folder-timeformat ::

  #+BEGIN_SRC elisp :results raw :exports results
    (documentation-property 'kasten-folder-timeformat 'variable-documentation)
  #+END_SRC

  #+BEGIN_SRC elisp :results raw :exports results
    (concat "Default value: ="
    	(prin1-to-string (default-value 'kasten-folder-timeformat))
    	"=.")
  #+END_SRC

- Variable: kasten-id-clash-time-inc ::

  #+BEGIN_SRC elisp :results raw :exports results
    (documentation-property 'kasten-id-clash-time-inc 'variable-documentation)
  #+END_SRC

  #+BEGIN_SRC elisp :results raw :exports results
    (concat "Default value: ="
    	(prin1-to-string (default-value 'kasten-id-clash-time-inc))
    	"=.")
  #+END_SRC

- Variable: kasten-id-regexp ::

  #+BEGIN_SRC elisp :results raw :exports results
    (documentation-property 'kasten-id-regexp 'variable-documentation)
  #+END_SRC

  #+BEGIN_SRC elisp :results raw :exports results
    (concat "Default value: ="
    	(prin1-to-string (default-value 'kasten-id-regexp))
    	"=.")
  #+END_SRC

- Variable: kasten-backlink-comment ::

  #+BEGIN_SRC elisp :results raw :exports results
    (documentation-property 'kasten-backlink-comment 'variable-documentation)
  #+END_SRC

  #+BEGIN_SRC elisp :results raw :exports results
    (concat "Default value: =#+backlink:=.")
  #+END_SRC

- Variable: kasten-buffer-title ::

  #+BEGIN_SRC elisp :results raw :exports results
    (documentation-property 'kasten-buffer-title 'variable-documentation)
  #+END_SRC

  #+BEGIN_SRC elisp :results raw :exports results
    (concat "Default value: ="
    	(prin1-to-string (default-value 'kasten-buffer-title))
    	"=.")
  #+END_SRC

- Variable: kasten-minor-mode-lighter ::

  #+BEGIN_SRC elisp :results raw :exports results
    (documentation-property 'kasten-search-function 'variable-documentation)
  #+END_SRC

  #+BEGIN_SRC elisp :results raw :exports results
    (concat "Default value: =Kt=.")
  #+END_SRC

- Variable: kasten-auto-refresh ::

  #+BEGIN_SRC elisp :results raw :exports results
    (documentation-property 'kasten-auto-refresh 'variable-documentation)
  #+END_SRC

  #+BEGIN_SRC elisp :results raw :exports results
    (concat "Default value: ="
    	(prin1-to-string (default-value 'kasten-auto-refresh))
    	"=.")
  #+END_SRC

** Customisable Functions and Hooks

If the ID contains title (for example, using =§250229-23 332. 2. -foo= as ID of the
note created on 2025-02-29 at 23:33 titled =foo=), one can customise how to
convert the note title to a safer string which can be used as part of the
filename.

- Variable: kasten-safetitle-function ::

  #+BEGIN_SRC elisp :results raw :exports results
    (documentation-property 'kasten-safetitle-function 'variable-documentation)
  #+END_SRC

  #+BEGIN_SRC elisp :results raw :exports results
    (concat "Default value: ="
    	(prin1-to-string (default-value 'kasten-safetitle-function))
    	"=.")
  #+END_SRC

- Function: kasten--default-safetitle ::

  #+BEGIN_SRC elisp :results raw :exports results
    (documentation #'kasten--default-safetitle)
  #+END_SRC

** Customisable Faces

- User Option: kasten-buffer-title-face ::
  #+BEGIN_SRC elisp :results raw :exports results
    (documentation-property 'kasten-buffer-title-face 'face-documentation)
  #+END_SRC

  #+BEGIN_SRC elisp :results raw :exports results
    (concat "Default attributes: ="
    	(prin1-to-string (face-all-attributes 'kasten-buffer-title-face))
    	"=")
  #+END_SRC

- User Option: kasten-file-title-face ::
  #+BEGIN_SRC elisp :results raw :exports results
    (documentation-property 'kasten-file-title-face 'face-documentation)
  #+END_SRC

  #+BEGIN_SRC elisp :results raw :exports results
    (concat "Default attributes: ="
    	(prin1-to-string (face-all-attributes 'kasten-file-title-face))
    	"=")
  #+END_SRC

- User Option: kasten-title-category-split-face ::
  #+BEGIN_SRC elisp :results raw :exports results
    (documentation-property
     'kasten-title-category-split-face
     'face-documentation)
  #+END_SRC

  #+BEGIN_SRC elisp :results raw :exports results
    (concat "Default attributes: ="
    	(prin1-to-string (face-all-attributes
    			  'kasten-title-category-split-face))
    	"=")
  #+END_SRC

- User Option: kasten-file-category-face ::
  #+BEGIN_SRC elisp :results raw :exports results
    (documentation-property 'kasten-file-category-face 'face-documentation)
  #+END_SRC

  #+BEGIN_SRC elisp :results raw :exports results
    (concat "Default attributes: ="
    	(prin1-to-string (face-all-attributes 'kasten-file-category-face))
    	"=")
  #+END_SRC

- User Option: kasten-file-name-face ::
  #+BEGIN_SRC elisp :results raw :exports results
    (documentation-property 'kasten-file-name-face 'face-documentation)
  #+END_SRC

  #+BEGIN_SRC elisp :results raw :exports results
    (concat "Default attributes: ="
    	(prin1-to-string (face-all-attributes 'kasten-file-name-face))
    	"=")
  #+END_SRC

- User Option: kasten-live-search-edit-face ::
  #+BEGIN_SRC elisp :results raw :exports results
    (documentation-property 'kasten-live-search-edit-face 'face-documentation)
  #+END_SRC

  #+BEGIN_SRC elisp :results raw :exports results
    (concat "Default attributes: ="
    	(prin1-to-string (face-all-attributes 'kasten-live-search-edit-face))
    	"=")
  #+END_SRC

- User Option: kasten-button-face ::
  #+BEGIN_SRC elisp :results raw :exports results
    (documentation-property 'kasten-button-face 'face-documentation)
  #+END_SRC

  #+BEGIN_SRC elisp :results raw :exports results
    (concat "Default attributes: ="
    	(prin1-to-string (face-all-attributes 'kasten-button-face))
    	"=")
  #+END_SRC


The prompt text =Live search:= in Live Search uses default face =shadow=.

In Kasten Filters, lines start with =%= use =font-lock-comment-face=; lines
start with =#= use =font-lock-keyword-face=.

* Benchmark

1000 files (~5.9G) are generated using the following script to benchmark Kasten.

#+begin_src bash
  #!/bin/bash
  for i in {1..1000}; do
      dd if=/dev/urandom bs=1k count=4096 of="random_${i}.bin" status=none
      base64 -i "random_${i}.bin" -o "random_${i}.txt"
      rm "random_${i}.bin"
  done
#+end_src

The following benchmark is obtained by {{{kbd(M-x benchmark)}}} using Emacs
30.1, on an Apple Darwin machine with Apple SSD.  Variables =gc-cons-threshold=
and =gc-cons-percentage= are set to ~16000000~ and ~0.1~, accordingly.

| Package | Form                         | Elapsed Time | Garbage Collections |
|---------+------------------------------+--------------+---------------------|
| Deft    | =(deft)=                     | 148.025919s  |                  86 |
| Kasten  | =(kasten)=                   | 0.682055s    |                   1 |
| Kasten  | =(kasten-change-id "oldid")= | 11.295669s   |                   0 |

* Contributing

Contributions and bug reports are welcome!  For code contributions, please open
pull requests on GitHub.  For general issues (except security concerns), please
open issues on GitHub.

** Reporting Slowness

Users are encouraged to report any significant slowness of Kasten! If possible,
please include the following information, but please *do not include any
sensitive information*:
+ Emacs version ({{{kbd(M-x emacs-version RET)}}})
+ Kasten version
+ Operating system (=uname -a=)
+ Number of indexed files (=ls -1 /path/to/notes | wc -l=)
+ Total size of indexed files (=du -sh /path/to/notes=)
+ Profiler report ({{{kbd(M-x profiler-start RET RET)}}}, perform action,
  {{{kbd(M-x profiler-stop RET)}}}, and then {{{kbd(M-x profiler-report RET)}}}
+ Benchmark of the slow function ({{{kbd(M-x benchmark RET)}}} followed by the
  function and {{{kbd(RET)}}})

** Reporting Security Concerns

If you found any vulnerabilities or would like to report any security concerns,
please *do not* use any public channels.  Please contact the package author via
email.  Please *sign* and *encrypt* your email with PGP[fn::[[https://en.wikipedia.org/wiki/Pretty_Good_Privacy][Pretty Good Privacy]],
see also [[https://gnupg.org][GnuPG]]].  *Encrypted plain text email* MIMEs are preferred (do not use
~multipart/alternative~ to include HTML copies of the email).

- Key Server ::
  [[https://keyserver.ubuntu.com/][hkps://keyserver.ubuntu.com]]
- Email Address ::
  ~iamsqy αt outlo◯k d0t c○m~ [fn::Please replace =at=, =dot=, etc. to actual
  symbols and characters.]
- Key ID ::
  ~F8AD5243C3CFB24E~
- Primary key fingerprint ::
  ~548E 2320 AFD8 0063 1C76  274C F8AD 5243 C3CF B24E~
 

* GNU Free Documentation License
:PROPERTIES:
:APPENDIX: t
:END:

#+BEGIN_SRC shell :wrap example :results output :exports results
 cat ./COPYING
#+END_SRC

* GNU General Public License
:PROPERTIES:
:APPENDIX: t
:END:

#+BEGIN_SRC shell :wrap example :results output :exports results
 cat ../COPYING
#+END_SRC

* Too Long; Didn't Read
:PROPERTIES:
:APPENDIX: t
:END:

1. Install ~Kasten~ (not yet published).
   #+BEGIN_SRC elisp
     (use-package kasten)
   #+END_SRC
2. Customise.
   #+BEGIN_SRC elisp
     ;; Below configurations are not default values.
     (setq kasten-directory (expand-file-name "~/notes/")
           kasten-file-extensions '("org" "txt" "tex")
           kasten-title-max-pos 2048
           kasten-tag-max-pos 8192
           kasten-id-symbol "§"
           kasten-id-regexp "§\\([0-9]\\{8\\}-[0-9]\\{4\\}\\)"
           kasten-auto-refresh t)
   #+END_SRC
3. Launch ~Kasten~ with {{{kbd(M-x kasten RET)}}}.

# Local Variables:
# org-confirm-babel-evaluate: nil
# eval: (add-hook 'before-save-hook (lambda () (when (string= (buffer-file-name) "/Users/iamsqy/Desktop/kasten/docs/kasten.org") (save-excursion (goto-char (point-min)) (when (re-search-forward "^#\\+MACRO: updated .*" nil t) (replace-match (concat "#+MACRO: updated last updated " (format-time-string "%Y-%m-%d")))))) nil t))
# End:
